// Generated by CoffeeScript 1.4.0
(function() {
  var define,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof define !== 'function') {
    define = require('amdefine')(module);
  }

  define(['./_', './TokenizedHeader'], function(_, TokenizedHeader) {
    var LinkHeader;
    return LinkHeader = (function(_super) {

      __extends(LinkHeader, _super);

      LinkHeader.prototype._parseParamCallback = function(_arg) {
        var key, value;
        key = _arg[0], value = _arg[1];
        if (/^<.*>$/.test(key) && _.type(value) === 'undefined') {
          value = key.substr(1, key.length - 2);
          key = 'href';
        }
        return [key, value];
      };

      LinkHeader.prototype._stringifyParamCallback = function(_arg) {
        var key, param, value;
        key = _arg[0], value = _arg[1];
        param = [];
        switch (key) {
          case 'href':
            [];
            break;
          default:
            param = [key, value];
        }
        return param;
      };

      LinkHeader.prototype._stringifyTokenCallback = function(params, token) {
        params.unshift("<" + token.href + ">");
        return params;
      };

      function LinkHeader(header, config) {
        if (config == null) {
          config = {};
        }
        if (!(this instanceof LinkHeader)) {
          return new LinkHeader(header, config);
        }
        LinkHeader.__super__.constructor.call(this, header, config);
      }

      return LinkHeader;

    })(TokenizedHeader);
  });

}).call(this);
