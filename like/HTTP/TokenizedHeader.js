// Generated by CoffeeScript 1.4.0
(function() {
  var define,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (typeof define !== 'function') {
    define = require('amdefine')(module);
  }

  define(['./_'], function(_) {
    var TokenizedHeader;
    return TokenizedHeader = (function() {
      var _i, _len, _optionName, _optionNames;

      TokenizedHeader.prototype._tokens = [];

      _.prop.call(TokenizedHeader, 'tokens');

      TokenizedHeader.prototype._tokenSep = ',';

      TokenizedHeader.prototype._paramSep = ';';

      TokenizedHeader.prototype._keyValueSep = '=';

      TokenizedHeader.prototype._parseParamCallback = void 0;

      TokenizedHeader.prototype._stringifyParamCallback = void 0;

      _optionNames = ['tokenSep', 'paramSep', 'keyValueSep', 'parseParamCallback', 'stringifyParamCallback'];

      TokenizedHeader.prototype._optionNames = _optionNames;

      for (_i = 0, _len = _optionNames.length; _i < _len; _i++) {
        _optionName = _optionNames[_i];
        _.prop.call(TokenizedHeader, _optionName);
      }

      function TokenizedHeader(header, options) {
        var option, optionName, _j, _len1, _ref;
        if (options == null) {
          options = {};
        }
        if (!(this instanceof TokenizedHeader)) {
          return new TokenizedHeader(header, config);
        }
        if (header instanceof TokenizedHeader) {
          _ref = this._optionNames;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            optionName = _ref[_j];
            this["_" + optionName] = _.cloneDeep(true, header[optionName]);
          }
        } else {
          this._parseHeader(header);
        }
        for (optionName in options) {
          option = options[optionName];
          if (__indexOf.call(this._optionNames, optionName) < 0) {
            continue;
          }
          this["_" + optionName] = option;
        }
      }

      TokenizedHeader.prototype._parseHeader = function(header) {
        var tokens,
          _this = this;
        tokens = header.split(this._tokenSep);
        tokens = _.map(tokens, function(token) {
          var key, param, params, value, _j, _len1, _ref, _ref1, _ref2;
          token = token.trim();
          params = token.split(_this._paramSep);
          token = {};
          for (_j = 0, _len1 = params.length; _j < _len1; _j++) {
            param = params[_j];
            param = param.trim();
            _ref = param.split(_this._keyValueSep), key = _ref[0], value = _ref[1];
            if (_this._parseParamCallback) {
              _ref1 = _this._parseParamCallback([key, value]), key = _ref1[0], value = _ref1[1];
            }
            key = key.trim();
            if (_.type(value) === 'string') {
              value = value.trim();
              if (/^\".*\"$/.test(value)) {
                value = value.substr(1, value.length - 2);
              }
            } else {
              value = true;
            }
            if ((_ref2 = token[key]) == null) {
              token[key] = value;
            }
          }
          if (_this._parseTokenCallback) {
            token = _this._parseTokenCallback(token);
          }
          return token;
        });
        return this._tokens = tokens;
      };

      TokenizedHeader.prototype._toString = function(tokens) {
        var _this = this;
        tokens = _.map(tokens, function(token) {
          var params;
          params = _.map(token, function(value, key) {
            var _ref;
            if (_this._stringifyParamCallback) {
              _ref = _this._stringifyParamCallback([key, value]), key = _ref[0], value = _ref[1];
            }
            if (_.type(key) === 'undefined') {
              return;
            }
            if (value === true) {
              return key;
            }
            if (/\ /.test(value)) {
              value = "\"" + value + "\"";
            }
            return [key, value].join(_this._keyValueSep);
          });
          params = _.compact(params);
          if (_this._stringifyTokenCallback) {
            params = _this._stringifyTokenCallback(params, token);
          }
          return params.join(_this._paramSep);
        });
        tokens = _.compact(tokens);
        return tokens.join(this._tokenSep);
      };

      TokenizedHeader.prototype.toString = function() {
        return this._toString(this._tokens);
      };

      return TokenizedHeader;

    })();
  });

}).call(this);
